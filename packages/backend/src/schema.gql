# -----------------------------------------------
# !!! THIS FILE WAS GENERATED BY TYPE-GRAPHQL !!!
# !!!   DO NOT MODIFY THIS FILE BY YOURSELF   !!!
# -----------------------------------------------

type Application {
  id: Int!
  name: String!
  description: String!
  createdBy: User
  createdAt: DateTime!
  updatedAt: DateTime!
  organization: Organization!
  containerGroups: [ContainerGroup!]!
  deployments: [Deployment!]!
  secrets: [Secret!]!
}

type ApplicationMutations {
  delete: Application!
  update(secret: SecretInput, description: String, name: String): Application!
  createDeployment(image: String!): Deployment!
  updateDeployment(image: String!, id: Int!): Deployment!
  deleteDeployment(id: Int!): Deployment!
  createContainerGroup(number: Int!, size: Int!, deployment: Int!, label: String!): ContainerGroup!
  updateContainerGroup(number: Int, label: String, id: Int!): ContainerGroup!
  deleteContainerGroup(id: Int!): ContainerGroup!
}

type Container {
  id: Int!
  status: String!
}

type ContainerGroup {
  id: Int!
  label: String!
  size: Int!
  containerCount: Float!
  createdAt: DateTime!
  updatedAt: DateTime!
  deployment: Deployment!
  containers: [Container!]!
}

"""
The javascript `Date` as string. Type represents date and time as the ISO Date string.
"""
scalar DateTime

type Deployment {
  id: Int!
  image: String!
  createdAt: DateTime!
  updatedAt: DateTime!
  containerGroups: [ContainerGroup!]!
}

type Mutation {
  application(id: Int!): ApplicationMutations!
  createApplication(description: String, name: String!): Application!
  exchangeTOTP(token: String!): Result!
  enableTotp(token: String!, secret: String!): Result!
  disableTotp(password: String!): Result!
  signUp(password: String!, email: String!, name: String!): Result!
  signIn(password: String!, email: String!): SignInResult!
  updateAccount(email: String, name: String): User!
  forgotPassword(email: String!): Result!
  resetPassword(password: String!, uuid: String!): Result!
}

type Organization {
  id: Int!
  isPersonal: Boolean!
  name: String!
  createdAt: DateTime!
  updatedAt: DateTime!
}

type Query {
  applications: [Application!]!
  application(id: Int!): Application!
  me: User!
}

"""Provides a boolean to determine if the action was successful or not."""
type Result {
  ok: Boolean!
}

type Secret {
  key: String!
  value: String!
}

input SecretInput {
  key: String!
  value: String!
}

"""
A special type of result used just for SignIns. Provides a boolean for if the
user requires a TOTP exchange before being fully logged in.
"""
type SignInResult {
  ok: Boolean!
  requiresTOTP: Boolean!
}

type User {
  id: Int!
  name: String!
  email: String!
  createdAt: DateTime!
  updatedAt: DateTime!
  hasTOTP: Boolean!
  organizations: [Organization!]!
  onboardTOTP: String!
}
